# k-평균 알고리즘
- 작동방식:
  1. 무작위로 k개의 클러스터 중심을 정합니다.
  2. 각 샘플에서 가장 가까운 클러스터 중심을 찾아 해당 클러스터의 샘플로 지정
  3. 클러스터에 속한 샘플의 평균값으로 클러스터 중심을 변경
  4. 클러스터 중심에 변화가 없을 때까지 2번으로 돌아가 반복
--> 처음에는 랜덤하게 클러스터 중심을 선택하고 점차 가장 가까운 샘플의 중심으로 이동하는 비교적 간단한 알고리즘
- 단점: 클러스터 개수를 사전에 지정해야함 --> but 실전에선 클러스터 개수조차 알 수 없음 --> 어떻게 n_clusters 지정?
  ==> 최적으 k찾기! --> 여러가지 방법 존재 ex) 엘보우 방법
- 사이킷런의 KMeans 클래스 : 
  - k-평균 알고리즘 구현함
  - 각 샘플이 어떤 클러스터에 소속되어 있는지 labels_속성에 저장함
  - n_clusters : 클러스터 개수 지정, 기본값은 8
  - n_init : 반복 회수 지정, 기본값은 10
  - max_iter : k-평균 알고리즘의 한 번 실행에서 최적의 센트로이드를 찾기 위해 반복할 수 잇는 최대 횟수, 기본값은 200

#클러스터중심(센트로이드)
: k-평균알고리즘이만든 클러스터에 속한 샘플의 특성 평균값
- 가장 가까운 클러스터 중심을샘플의 또 다른 특성으로 사용하거나 새로운 샘플에 대한 예측으로 활용 가능

#엘보우 방법
: 클러스터 개수를 늘려가면서 이너셔의 변화를 관찰해 최적의 클러스터 개수를 찾는 방법
- 이너서 : 클러스터의 샘플이 얼마나 가깝게 있는지를 나타내는 값
  - k-평균 알고리즘은 클러스터 중심과 클러스터에 속한 샘플 사이의 거리를 잴 수 있고 이 거리의 제곱 합을 이너셔라고 함
  - 즉 클러스터에 속한 샘플이 얼마나 가깝게 모여 있는지를 나타낸 값이라 생각할 수 있음
  - 일반적으로 클러스터 개수가 늘어나면 클러스터 개개의 크기는 줄어들기 때문에 이너셔도 줄어듦
  - KMeans 클래스 자동으로 이너셔를 계산해 inertia_ 속성으로 제공함
- 클러스터 개수를 증가시키면서 이너셔를 그래프로 그리면 감소하는 속도가 꺽이는 지점이 있음
  --> 이 지점부터는 클러스터 개수를 늘려도 클러스터에 잘 밀집된 정도가 크게 개선X, 즉 이너셔가 크게 줄어들지 않음
  ==> 이너셔가 줄어드는 속도가 꺾이는 지점을 최적의 클러스터 개수로 결정
  ==> 이 지점이 마치 팔꿈치 모양이여서 엘보우 방법이라 부름
  * 엘보우 지점보다 클러스터 개수가 많아지면 이너셔의 변화가 줄어들면서 군집효과도 줄어듦
  ==> 이너셔가 더 이상 크게 줄어들지 않는다면 클러스터 개수를 더 늘리는 것은 효과가 없음 
